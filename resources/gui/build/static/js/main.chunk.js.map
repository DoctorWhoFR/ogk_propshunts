{"version":3,"sources":["onset.ts","redux/reducer.ts","redux/store.ts","Counter.tsx","App.tsx","index.tsx"],"names":["fn","incrementCounter","createAction","window","store","dispatch","counterReducer","createReducer","counter","type","state","configureStore","reducer","Counter","counterValue","useSelector","appState","App","className","ReactDOM","render","document","getElementById"],"mappings":"8MAS2BA,E,2ECLdC,EAAmBC,YAAa,qBAG5CC,OAAeF,kBDEWD,ECFmBC,EDEG,kBAAoBG,EAAMC,SAASL,EAAE,WAAF,gBCMpF,IAKaM,EAAiBC,YALE,CAC5BC,QAAS,GAI8B,eACtCP,EAAiBQ,MAAO,SAACC,GAAD,sBAAiBA,EAAjB,CAAwBF,QAASE,EAAMF,QAAU,QClBjEJ,EAAQO,YAAe,CAAEC,QAASN,ICElCO,EAAU,WACnB,IAAMC,EAAeC,aAAY,SAACC,GAAD,OAAyBA,EAASR,WAEnE,OACI,4BACKM,ICYEG,EAfO,WACpB,OACE,kBAAC,IAAD,CAAUb,MAAOA,GACf,yBAAKc,UAAU,OACb,4BAAQA,UAAU,cAChB,2EAGA,kBAAC,EAAD,UCRVC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.chunk.js","sourcesContent":["import {incrementCounter} from \"./redux/reducer\";\r\nimport {store} from \"./redux/store\";\r\nimport { AnyAction } from \"@reduxjs/toolkit\";\r\n\r\n/**\r\n * You should not edit this file this is the function to dispatch actions to the store\r\n * outside of a react component\r\n */\r\ntype ForeignAction = (...args: any[]) => AnyAction;\r\nexport const wrapAction = (fn: ForeignAction) => (...args: any[]) => store.dispatch(fn(...args));\r\n","import { createAction, AnyAction, createReducer } from \"@reduxjs/toolkit\";\r\nimport { wrapAction } from \"../onset\";\r\n\r\n// Here I create an action that takes no argument\r\nexport const incrementCounter = createAction(\"INCREMENT_COUNTER\");\r\n\r\n// I want this action to be available to Onset so I attach it globally\r\n(window as any).incrementCounter = wrapAction(incrementCounter)\r\n\r\n// Here I declare the state of my whole application\r\n// I only have one of course because this is only counting\r\nexport interface IAppState {\r\n    counter: number;\r\n}\r\n\r\nconst initialState: IAppState = {\r\n    counter: 0\r\n};\r\n\r\n// Here it is my reducer, his tasks is to merge the future state with\r\nexport const counterReducer = createReducer(initialState, {\r\n    [incrementCounter.type]: (state) => ({ ...state, counter: state.counter + 1 })\r\n});\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport { counterReducer } from \"./reducer\";\r\n\r\nexport const store = configureStore({ reducer: counterReducer });\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { IAppState } from \"./redux/reducer\";\r\n\r\n// The component that renders the counter value\r\nexport const Counter = () => {\r\n    const counterValue = useSelector((appState: IAppState) => appState.counter);\r\n    \r\n    return (\r\n        <h1>\r\n            {counterValue}\r\n        </h1>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Provider } from 'react-redux';\r\nimport {store} from \"./redux/store\";\r\nimport {Counter} from \"./Counter\";\r\n\r\n// This is the main part of the application that will run as soon as the cef is ready and javascript loaded\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <p>\r\n            LUA world will update my value every seconds\r\n          </p>\r\n          <Counter />\r\n        </header>\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport \"./onset\";\r\n\r\n// This is the react bootstrapping file, nothing interesting here :)\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}