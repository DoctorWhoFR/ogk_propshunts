{"version":3,"sources":["onset.ts","redux/reducer.ts","redux/store.ts","notifications/Notifications.tsx","App.tsx","index.tsx"],"names":["wrapAction","fn","store","dispatch","incrementCounter","createAction","window","addNotification","cleanNotification","clearNotification","counterReducer","createReducer","counter","notifications","type","state","action","JSON","parse","payload","Date","now","filter","n","id","configureStore","reducer","Notification","props","className","notification","title","message","Notifications","useSelector","appState","map","App","ReactDOM","render","document","getElementById"],"mappings":"mbASaA,EAAa,SAACC,GAAD,OAAuB,kBAAoBC,EAAMC,SAASF,EAAE,WAAF,gBCJvEG,EAAmBC,YAAa,qBAG5CC,OAAeF,iBAAmBJ,EAAWI,GAEvC,IAAMG,EAAkBF,YAAa,oBAC/BG,EAAoBH,YAAa,uBAC7CC,OAAeC,gBAAkBP,EAAWO,GAC5CD,OAAeG,kBAAoBT,EAAWQ,GAS/C,IAMaE,EAAiBC,YANE,CAC5BC,QAAS,EACTC,cAAe,KAIwB,mBACtCT,EAAiBU,MAAO,SAACC,GAAD,sBAAiBA,EAAjB,CAAwBH,QAASG,EAAMH,QAAU,OADnC,cAEtCL,EAAgBO,MAAO,SAACC,EAAOC,GAAR,sBAAwBD,EAAxB,CAA+BF,cAAc,GAAD,mBAAME,EAAMF,eAAZ,gBAA+BI,KAAKC,MAAMF,EAAOG,iBAF9E,cAGtCX,EAAkBM,MAAO,SAACC,EAAOC,GAClBI,KAAKC,MACjB,OAAO,eAAIN,EAAX,CAAkBF,cAAeE,EAAMF,cAAcS,QAAO,SAAAC,GAAC,OAAIA,EAAEC,KAAOR,EAAOG,gBAL9C,ICzB9BjB,EAAQuB,YAAe,CAAEC,QAAShB,ICQzCiB,EAAe,SAACC,GAClB,OACI,yBAAKC,UAAU,8BACX,yBAAKA,UAAU,sBACX,4BAAKD,EAAME,aAAaC,QAE5B,yBAAKF,UAAU,wBACVD,EAAME,aAAaE,WAMvBC,EAAgB,WACzB,IAAMpB,EAAgBqB,aAAY,SAACC,GAAD,OAAyBA,EAAStB,iBACpE,OAAQ,oCACHA,EAAcuB,KAAI,SAAAb,GAAC,OAAI,kBAAC,EAAD,CAAcO,aAAcP,SCA7Cc,G,0CAVO,WACpB,OACE,kBAAC,IAAD,CAAUnC,MAAOA,GACf,yBAAK2B,UAAU,WACb,kBAAC,EAAD,UCbRS,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.chunk.js","sourcesContent":["import {incrementCounter} from \"./redux/reducer\";\r\nimport {store} from \"./redux/store\";\r\nimport { AnyAction } from \"@reduxjs/toolkit\";\r\n\r\n/**\r\n * You should not edit this file this is the function to dispatch actions to the store\r\n * outside of a react component\r\n */\r\ntype ForeignAction = (...args: any[]) => AnyAction;\r\nexport const wrapAction = (fn: ForeignAction) => (...args: any[]) => store.dispatch(fn(...args));\r\n","import { createAction, AnyAction, createReducer } from \"@reduxjs/toolkit\";\r\nimport { wrapAction } from \"../onset\";\r\nimport { INotification } from \"../notifications/Notifications\";\r\n\r\n// Here I create an action that takes no argument\r\nexport const incrementCounter = createAction(\"INCREMENT_COUNTER\");\r\n\r\n// I want this action to be available to Onset so I attach it globally\r\n(window as any).incrementCounter = wrapAction(incrementCounter);\r\n\r\nexport const addNotification = createAction(\"ADD_NOTIFICATION\");\r\nexport const cleanNotification = createAction(\"CLEAN_NOTIFICATIONS\");\r\n(window as any).addNotification = wrapAction(addNotification);\r\n(window as any).clearNotification = wrapAction(cleanNotification);\r\n\r\n// Here I declare the state of my whole application\r\n// I only have one of course because this is only counting\r\nexport interface IAppState {\r\n    counter: number;\r\n    notifications: INotification[];\r\n}\r\n\r\nconst initialState: IAppState = {\r\n    counter: 0,\r\n    notifications: []\r\n};\r\n\r\n// Here it is my reducer, his tasks is to merge the future state with\r\nexport const counterReducer = createReducer(initialState, {\r\n    [incrementCounter.type]: (state) => ({ ...state, counter: state.counter + 1 }),\r\n    [addNotification.type]: (state, action) => ({...state, notifications: [...state.notifications, {...JSON.parse(action.payload)}]}),\r\n    [cleanNotification.type]: (state, action) => {\r\n        const now = Date.now();\r\n        return {...state, notifications: state.notifications.filter(n => n.id !== action.payload)};\r\n    }\r\n});\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport { counterReducer } from \"./reducer\";\r\n\r\nexport const store = configureStore({ reducer: counterReducer });\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { IAppState } from \"../redux/reducer\";\r\n\r\nexport interface INotification {\r\n    id: string;\r\n    timestamp: number;\r\n    title: string;\r\n    message: string;\r\n}\r\n\r\nconst Notification = (props: {notification: INotification}) => {\r\n    return (\r\n        <div className=\"ogk-shadowbox notification\">\r\n            <div className=\"notification-title\">\r\n                <h1>{props.notification.title}</h1>\r\n            </div>\r\n            <div className=\"notification-message\">\r\n                {props.notification.message}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const Notifications = () => {\r\n    const notifications = useSelector((appState: IAppState) => appState.notifications);\r\n    return (<>\r\n        {notifications.map(n => <Notification notification={n} />)}\r\n    </>);\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Provider } from 'react-redux';\r\nimport {store} from \"./redux/store\";\r\nimport {Counter} from \"./Counter\";\r\nimport { Notifications } from './notifications/Notifications';\r\n\r\n// CSS\r\nimport \"./assets/css/nuclearbulma.css\"\r\nimport \"./assets/css/ogk_commons.css\"\r\nimport \"./assets/css/ogk_hud.css\"\r\nimport \"./assets/css/ogk_leaderboard.css\"\r\nimport \"./assets/css/ogk_ui.css\"\r\nimport \"./assets/css/ogk_votemap.css\"\r\nimport \"./assets/css/ogk_notifications.css\"\r\n\r\n// This is the main part of the application that will run as soon as the cef is ready and javascript loaded\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"content\">\r\n        <Notifications/>\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport \"./onset\";\r\nimport _ from 'lodash';\r\n\r\n// This is the react bootstrapping file, nothing interesting here :)\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}