{"version":3,"sources":["onset.ts","redux/reducer.ts","redux/store.ts","notifications/Notifications.tsx","Hud.tsx","App.tsx","index.tsx"],"names":["wrapAction","fn","store","dispatch","updatePlayerState","createAction","window","addNotification","cleanNotification","clearNotification","counterReducer","createReducer","counter","notifications","player","health","type","state","action","JSON","parse","payload","Date","now","filter","n","id","configureStore","reducer","Notification","props","className","notification","title","message","Notifications","useSelector","appState","map","Hud","App","ReactDOM","render","document","getElementById"],"mappings":"mbAQaA,EAAa,SAACC,GAAD,OAAuB,kBAAoBC,EAAMC,SAASF,EAAE,WAAF,gBCHvEG,EAAoBC,YAAa,uBAG7CC,OAAeF,kBAAoBJ,EAAWI,GAExC,IAAMG,EAAkBF,YAAa,oBAC/BG,EAAoBH,YAAa,uBAC7CC,OAAeC,gBAAkBP,EAAWO,GAC5CD,OAAeG,kBAAoBT,EAAWQ,GAY/C,IASaE,EAAiBC,YATE,CAC5BC,QAAS,EACTC,cAAe,GACfC,OAAQ,CACJC,OAAQ,KAK2B,mBACtCX,EAAkBY,MAAO,SAACC,EAAOC,GAAR,sBAAyBD,EAAzB,CAAgCH,OAAQK,KAAKC,MAAMF,EAAOG,cAD7C,cAEtCd,EAAgBS,MAAO,SAACC,EAAOC,GAAR,sBAAwBD,EAAxB,CAA+BJ,cAAc,GAAD,mBAAMI,EAAMJ,eAAZ,gBAA+BM,KAAKC,MAAMF,EAAOG,iBAF9E,cAGtCb,EAAkBQ,MAAO,SAACC,EAAOC,GAClBI,KAAKC,MACjB,OAAO,eAAIN,EAAX,CAAkBJ,cAAeI,EAAMJ,cAAcW,QAAO,SAAAC,GAAC,OAAIA,EAAEC,KAAOR,EAAOG,gBAL9C,IC/B9BnB,EAAQyB,YAAe,CAAEC,QAASlB,ICQzCmB,EAAe,SAACC,GAClB,OACI,yBAAKC,UAAU,8BACX,yBAAKA,UAAU,sBACX,4BAAKD,EAAME,aAAaC,QAE5B,yBAAKF,UAAU,wBACVD,EAAME,aAAaE,WAMvBC,EAAgB,WACzB,IAAMtB,EAAgBuB,aAAY,SAACC,GAAD,OAAyBA,EAASxB,iBACpE,OAAQ,oCACHA,EAAcyB,KAAI,SAAAb,GAAC,OAAI,kBAAC,EAAD,CAAcO,aAAcP,SCvB/Cc,G,0CAAM,WACf,IAAMzB,EAASsB,aAAY,SAACC,GAAD,OAAyBA,EAASvB,UAE7D,OACI,6BACI,yBAAKiB,UAAU,qCACf,yBAAKA,UAAU,WACX,yBAAKA,UAAU,UACX,0BAAMA,UAAU,YAAYL,GAAG,UAAUZ,EAAOC,QAAc,6BAC9D,0BAAMgB,UAAU,gBAAhB,YAGR,gDACoB,0BAAML,GAAG,gBAD7B,IACmD,6BADnD,SAEU,0BAAMA,GAAG,iBAEf,yBAAKK,UAAU,0BCShBS,EAXO,WACpB,OACE,kBAAC,IAAD,CAAUtC,MAAOA,GACf,yBAAK6B,UAAU,WACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCfRU,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.chunk.js","sourcesContent":["import {store} from \"./redux/store\";\r\nimport { AnyAction } from \"@reduxjs/toolkit\";\r\n\r\n/**\r\n * You should not edit this file this is the function to dispatch actions to the store\r\n * outside of a react component\r\n */\r\ntype ForeignAction = (...args: any[]) => AnyAction;\r\nexport const wrapAction = (fn: ForeignAction) => (...args: any[]) => store.dispatch(fn(...args));\r\n","import { createAction, AnyAction, createReducer } from \"@reduxjs/toolkit\";\r\nimport { wrapAction } from \"../onset\";\r\nimport { INotification } from \"../notifications/Notifications\";\r\n\r\n// Here I create an action that takes no argument\r\nexport const updatePlayerState = createAction(\"UPDATE_PLAYER_STATE\");\r\n\r\n// I want this action to be available to Onset so I attach it globally\r\n(window as any).updatePlayerState = wrapAction(updatePlayerState);\r\n\r\nexport const addNotification = createAction(\"ADD_NOTIFICATION\");\r\nexport const cleanNotification = createAction(\"CLEAN_NOTIFICATIONS\");\r\n(window as any).addNotification = wrapAction(addNotification);\r\n(window as any).clearNotification = wrapAction(cleanNotification);\r\n\r\n// Here I declare the state of my whole application\r\n// I only have one of course because this is only counting\r\nexport interface IAppState {\r\n    counter: number;\r\n    notifications: INotification[];\r\n    player: {\r\n        health: number\r\n    }\r\n}\r\n\r\nconst initialState: IAppState = {\r\n    counter: 0,\r\n    notifications: [],\r\n    player: {\r\n        health: 0\r\n    }\r\n};\r\n\r\n// Here it is my reducer, his tasks is to merge the future state with\r\nexport const counterReducer = createReducer(initialState, {\r\n    [updatePlayerState.type]: (state, action) => ({ ...state, player: JSON.parse(action.payload)}),\r\n    [addNotification.type]: (state, action) => ({...state, notifications: [...state.notifications, {...JSON.parse(action.payload)}]}),\r\n    [cleanNotification.type]: (state, action) => {\r\n        const now = Date.now();\r\n        return {...state, notifications: state.notifications.filter(n => n.id !== action.payload)};\r\n    }\r\n});\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport { counterReducer } from \"./reducer\";\r\n\r\nexport const store = configureStore({ reducer: counterReducer });\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { IAppState } from \"../redux/reducer\";\r\n\r\nexport interface INotification {\r\n    id: string;\r\n    timestamp: number;\r\n    title: string;\r\n    message: string;\r\n}\r\n\r\nconst Notification = (props: {notification: INotification}) => {\r\n    return (\r\n        <div className=\"ogk-shadowbox notification\">\r\n            <div className=\"notification-title\">\r\n                <h1>{props.notification.title}</h1>\r\n            </div>\r\n            <div className=\"notification-message\">\r\n                {props.notification.message}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const Notifications = () => {\r\n    const notifications = useSelector((appState: IAppState) => appState.notifications);\r\n    return (<>\r\n        {notifications.map(n => <Notification notification={n} />)}\r\n    </>);\r\n}\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { IAppState } from \"./redux/reducer\";\r\n\r\nexport const Hud = () => {\r\n    const player = useSelector((appState: IAppState) => appState.player);\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"player-hud content ogk-shadowbox \">\r\n            <div className=\"hud-top\">\r\n                <div className=\"column\">\r\n                    <span className=\"hud-title\" id=\"health\">{player.health}</span><br />\r\n                    <span className=\"hud-subtitle\">HEALTH</span>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                Current Weapon: <span id=\"weaponsName\"></span> <br />\r\n                Next: <span id=\"weaponsNext\"></span>\r\n            </div>\r\n                <div className=\"hud-bottom column\">\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Provider } from 'react-redux';\r\nimport {store} from \"./redux/store\";\r\nimport {Counter} from \"./Counter\";\r\nimport { Notifications } from './notifications/Notifications';\r\n\r\n// CSS\r\nimport \"./assets/css/nuclearbulma.css\"\r\nimport \"./assets/css/ogk_commons.css\"\r\nimport \"./assets/css/ogk_hud.css\"\r\nimport \"./assets/css/ogk_leaderboard.css\"\r\nimport \"./assets/css/ogk_ui.css\"\r\nimport \"./assets/css/ogk_votemap.css\"\r\nimport \"./assets/css/ogk_notifications.css\"\r\nimport { Hud } from './Hud';\r\n\r\n// This is the main part of the application that will run as soon as the cef is ready and javascript loaded\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"content\">\r\n        <Notifications/>\r\n        <Hud />\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport \"./onset\";\r\nimport _ from 'lodash';\r\n\r\n// This is the react bootstrapping file, nothing interesting here :)\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}